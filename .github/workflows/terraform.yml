
name: 'Terraform-gitops'

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY}}
  
on:
  push:
    branches:
      - feature/**
      - develop
      - uat
      - prod
  pull_request:
    types: 
      - review_requested
      - edited
      - assigned
    # branches: 
    #   # - develop
    #   # - uat
    #   # - prod
    

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: develop

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
     
    - name: Set output Branch name
      id: vars
      shell: bash
      run: |
        echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
      # with:
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    - name: Setup Terraform remote
      working-directory: ./remote-state

      if: contains(github.ref,'develop') || contains(github.ref,'uat') || contains(github.ref,'main')    
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: ${{ steps.vars.outputs.branch }} 
        GIT_BRANCH: ${{ steps.vars.outputs.branch }}
      run: |
        terraform init
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"

        ../script/setbackend.sh
     
    - name: Setup Terraform remote test feature
      working-directory: ./remote-state
      if: contains(github.ref,'feature') 
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: develop
        GIT_BRANCH: develop 
      run: |
        terraform init
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform plan for test feature branch
      working-directory: ./develop
      if: contains(github.ref,'feature') 
      run: |
       terraform init 
       terraform plan
       
    - name: Terraform Init

      working-directory: ./${{ steps.vars.outputs.branch }}
      if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/uat' ) && github.event_name == 'push'
      run: terraform init

    - name: Terraform Apply
      if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/uat' ) && github.event_name == 'push'
      env:
        GIT_BRANCH: ${{ steps.vars.outputs.branch }}:w
      working-directory: ./${{ steps.vars.outputs.branch }}
      run: |
        echo ${{ steps.vars.outputs.branch }}
        terraform validate
        terraform apply -auto-approve -var-file='../settingaws.tfvars'


#   - name: Terraform plan
#      if: contains(${{ steps.vars.output.branch }},'feature') 
#      working-directory: ./${{ steps.vars.output.branch }}
#      run: terraform plan 
      
